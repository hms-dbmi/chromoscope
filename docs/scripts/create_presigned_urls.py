import logging
import os
import boto3
from botocore.exceptions import ClientError

logger = logging.getLogger(__name__)

"""
based on code from AWS boto3 documentation: https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-presigned-urls.html
for IAM users: Presigned URLs can be valid up to seven days (604800 sec) when using AWS Signature Version 4.
Usage example: generate_presigned_URL("EXAMPLE_BUCKET_NAME", "SV/EXAMPLE_ID/EXAMPLE_merged_somatic.bedpe")
"""
def generate_presigned_URL(bucket_name, object_path, expiration=3600):
    """
    Generate a presigned URL that can be used to share a private S3 object.

    :param bucket_name: The name of S3 bucket containing private objects.
    :type bucket_name: string
    :param object_path: The relative path of S3 object to be shared via presigned URL.
    :type object_path: string
    :param expiration: The number of seconds the presigned URL is valid for.
    :type expiration: int
    :return: The presigned URL.
    :rtype: string
    """

    # Create low-level S3 service client
    s3_client = boto3.client("s3")

    try:
        # URL generated by AWS user with access to private object (i.e. the owner)
        url = s3_client.generate_presigned_url(
            ClientMethod="get_object",
            Params={
                "Bucket": bucket_name,
                "Key": object_path
            },
            ExpiresIn=expiration
        )
    except ClientError as err:
        logger.error(err)
        return None

    # Return the presigned URL as a string
    return url

#######################################

def list_items_in_bucket_dir(bucket_name, object_path):
    target = "s3://" + bucket_name + "/" + object_path + "/"
    item_str = os.popen("aws s3 ls  %s | awk 'NF>1{print $4}' | grep ." % (target)).read()
    item_list = item_str.split('\n')
    return item_list

def check_URL_validity(bucket_name, object_path):
    s3_client = boto3.client("s3")
    s3_client.get_object(Bucket=bucket_name, Key=object_path)