import boto3
from botocore.exceptions import ClientError
import logging

################################################
# Based on code from AWS boto3 documentation:
# https://boto3.amazonaws.com/v1/documentation/api/latest/index.html
################################################
def generate_presigned_URL(bucket_name, object_path, expiration=3600):
    """
    Generates a presigned URL that can be used to share a private S3 object.

    :param bucket_name: The name of S3 bucket containing private objects.
    :type bucket_name: str
    :param object_path: The relative path of S3 object to be shared.
    :type object_path: str
    :param expiration: The number of seconds the presigned URL is valid for.
    :type expiration: int
    :return: The presigned URL.
    :rtype: string
    """

    # Create low-level S3 service client
    s3_client = boto3.client("s3")

    try:
        # URL generated by AWS user with access to private object
        url = s3_client.generate_presigned_url(
            ClientMethod="get_object",
            Params={
                "Bucket": bucket_name,
                "Key": object_path
            },
            ExpiresIn=expiration
        )
    except ClientError as client_err:
        logging.error(client_err)
        raise client_err

    # Return the presigned URL as a string
    return url



def upload_file(file_name, bucket_name, object_name=None):
    """
    Upload a file to an S3 bucket.

    :param file_name: File to upload.
    :type file_name: str
    :param bucket_name: Bucket to upload to
    :type bucket_name: str
    :param object_name: S3 object name. If not specified, file_name is used.
    :type object_name: str
    """

    # If S3 object_name was not specified, use file_name
    if object_name is None:
        object_name = os.path.basename(file_name)

    s3_client = boto3.client('s3')
    try:
        response = s3_client.upload_file(file_name, bucket_name, object_name)
    except ClientError as client_err:
        logging.error(client_err)
        raise client_err


def list_items_in_bucket_dir(bucket_name, obj_path, required):
    """
    Lists files in a specified directory within S3 bucket.
    
    :param bucket_name: Bucket to upload to
    :type bucket_name: str
    :param obj_path: Filepath within S3 bucket to goal subdirectory.
    :type obj_path: str
    :param required: if the objects within this directory are required for URL generation
    :type required: bool
    :return: list of item names within this subdirectory, and S3 path to this subdirectory
    :rtype: list, str
    """
    conn = boto3.client('s3') 
    target = "s3://" + bucket_name + "/" + obj_path
    item_list = []
    try:
        for key in conn.list_objects(Bucket=bucket_name, Prefix=obj_path)['Contents']:
            file_in_subdir = key['Key'].replace(obj_path, "")
            if len(file_in_subdir) > 0:
                item_list.append(file_in_subdir)
    except KeyError as key_err:
        if not required:
            pass
        else:
            logging.error(key_err)
            raise KeyError("S3 path %s invalid or empty, no %s" % (target, key_err))
        
    if (len(item_list) == 0) and required:
        raise Exception("S3 path invalid or empty: %s" % target)
        
    
    return item_list, target